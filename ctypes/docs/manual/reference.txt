ctypes reference
================

``addressof(obj)``
    Returns the address of ``obj`` as integer. ``obj`` must be an
    instance of a ctypes type.

``alignment(obj)``
    Returns the byte alignment requirement of ``obj``.

``ArgumentError``
    This exception is raised when a parameter cannot be used in a
    foreign function call.

.. undocumented because deprecated.
	``ARRAY``
	``Array``

``BigEndianStructure``
    Base class.

``byref(obj)`` : funcdesc
   Returns a light-weight pointer to a ctypes instance.  The returned
   object can only be used as function call parameter.  Behaves the
   same as calling ``pointer(object)``, but is a lot faster.  Same as
   ``&object`` in C.
   

.. undocumented because deprecated.
	``c_buffer``

.. topic:: ``c_byte``
   :class: funcdef

   Represents the C ``char`` data type, interpreted as integer.

``c_char_p``

``c_char``

``c_double``

``c_float``


``c_int8``, ``c_int16``, ``c_int32``, ``c_int64``

``c_short``

``c_int``

``c_long``

``c_longlong``

``c_size_t``

``c_ubyte``

``c_uint16``

``c_uint32``

``c_uint64``

``c_uint8``

``c_uint``

``c_ulong``

``c_ulonglong``

``c_ushort``

``c_void_p``

``c_voidp``

``c_wchar_p``

``c_wchar``

``cast(obj, type)``
    This function is similar to the cast operator in C.  Returns a new
    instance of ``type`` which shares the memory block of ``object``.
    ``type`` must be a pointer type.


``CDLL``

``cdll``

``CFUNCTYPE``

``create_string_buffer(init_or_size[, size])``
    Convenience function which creates a mutable character buffer.

    ``init`` must be a string.  If ``size`` is supplied it must be a
    positive integer that specifies the size of the buffer, otherwise
    the length of the ``init`` string is used.
    This function returns a ctypes array of characters ``c_char``.

``create_unicode_buffer``
    Convenience function which creates a mutable character buffer.

    ``init`` must be a unicode string.  If ``size`` is supplied it
    must be a positive integer that specifies the size of the buffer,
    otherwise the length of the ``init`` string is used.  This
    function returns a ctypes array of wide characters ``c_wchar``.

``DllCanUnloadNow``
    Windows only. This function is used to implement COM servers.

``DllGetClassObject``
    Windows only. This function is used to implement COM servers.

``FormatError([code], [descr])``
    Windows only. Returns a textual description of the error code, or
    the last error code set by Windows.

``GetLastError()``
    Windows only.  Return the last error code set by Windows in the
    calling thread.

``HRESULT``

``LibraryLoader``
    Instances of this type are used to load shared libraries.

``LittleEndianStructure``

``memmove(dst, src, count)``
    Same as the standard C ``memmove`` library function: copies
    ``count`` bytes from ``src`` to ``dst``.  ``dst`` and ``src`` must
    be integers or anything else that can be converted into a pointer.

``memset(dst, c, count)``
    Same as the standard C ``memset`` function.  Fills the memory block
    at address ``dst`` with ``count`` bytes of value ``c``.  ``dst`` must be
    an integer specifying an address, or a ctypes instance.

``OleDLL``

``oledll``

``POINTER(type)``
    This factory function creates and returns a new ctypes type.
    Pointer types are cached, so calling this function repeatedly is
    cheap.

``pointer(obj)``
    This function creates a new pointer instance, pointing to ``obj``
    which must be an instance of a ctypes type.  The return pointer is
    of type ``POINTER(type(obj))``.  If you just want to pass a
    pointer to this object to a foreign function call, you should use
    ``byref(obj)`` instead which is much faster.

``py_object``

``PyDLL``

``pydll``

``PYFUNCTYPE``

``pythonapi``

``resize``

``RTLD_GLOBAL``

``RTLD_LOCAL``

``set_conversion_mode``

``SetPointerType``

``sizeof``

``string_at``

``Structure``

``Union``

``WinDLL``

``windll``

``WinError``

``WINFUNCTYPE``

``wstring_at``
