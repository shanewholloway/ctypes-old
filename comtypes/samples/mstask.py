# This sample wraps several custom COM interfaces, for which no
# typelibrary is present.  The interfaces are declared in the MSVC
# MSTASK.H include file.
#
# generated by 'xml2py'
# flags 'mstask.xml -r ITask.* -m comtypes -o mstask.py'
#
# and then:
# - reordered manually
# - removed the HWND and HWND__ definitions, replaced with 'HWND = c_void_p'
#
# - filled in _iid_ entries, and completed the idl attributes and
# parameter names in the COMMETHOD definitions by looking into the
# header file
#
# - fixed the LPCWSTR and LPWSTR definitions
#

# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# PROBLEMS:
#
# memory leaks: Must call CoTaskMemFree in the methods returning
# LPWSTR items. See MSDN docs.
# Should this be solved by using subclasses of c_wchar_p, with a customized
# _from_outarg_ slot?
#

from ctypes import *
from comtypes import IUnknown
from comtypes import HRESULT
from comtypes import IID
from comtypes import STDMETHOD, GUID, COMMETHOD
from comtypes import DWORD
from comtypes import defaultvalue

##WCHAR = c_wchar
LPCWSTR = c_wchar_p #POINTER(WCHAR)
LPWSTR = c_wchar_p #POINTER(WCHAR)
BYTE = c_ubyte
HWND = c_void_p # XXX
WORD = c_ushort

S_OK = 0

################################################################
class _SYSTEMTIME(Structure):
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/winbase.h 270
    _fields_ = [
        ('wYear', WORD),
        ('wMonth', WORD),
        ('wDayOfWeek', WORD),
        ('wDay', WORD),
        ('wHour', WORD),
        ('wMinute', WORD),
        ('wSecond', WORD),
        ('wMilliseconds', WORD),
    ]
LPSYSTEMTIME = POINTER(_SYSTEMTIME)
SYSTEMTIME = _SYSTEMTIME
assert sizeof(_SYSTEMTIME) == 16, sizeof(_SYSTEMTIME)
assert alignment(_SYSTEMTIME) == 2, alignment(_SYSTEMTIME)

################################################################

CLSID_CTaskScheduler = GUID("{148BD52A-A2AB-11CE-B11F-00AA00530503}")
class ITaskScheduler(IUnknown):
    _iid_ = GUID('{148BD527-A2AB-11CE-B11F-00AA00530503}')

    def __iter__(self):
        return self.Enum()

    def NewWorkItem(self, name):
        # _NewWorkItem returns IUnknown pointer, but we want a ITask pointer.
        task = self._NewWorkItem(name, byref(CLSID_CTask), byref(ITask._iid_))
        return task.QueryInterface(ITask)

    def GetTargetComputer(self):
        # Need to free the result with CoTaskMemFree
        temp = LPWSTR()
        self.__com_GetTargetComputer(byref(temp))
        result = temp.value
        windll.ole32.CoTaskMemFree(temp)
        return result

    def IsOfType(self, name, interface):
        # Need to convert HRESULT into Python boolean
        return S_OK == self._IsOfType(name, byref(interface._iid_))

class IScheduledWorkItem(IUnknown):
    _iid_ = GUID('{a6b952f0-a4b1-11d0-997d-00aa006887ec}')

class ITaskTrigger(IUnknown):
    _iid_ = GUID('{148BD52B-A2AB-11CE-B11F-00AA00530503}')


class IEnumWorkItems(IUnknown):
    _iid_ = GUID('{148BD528-A2AB-11CE-B11F-00AA00530503}')

    def __iter__(self):
        return self

    def next(self):
         results = self.Next(1)
         if not results:
             raise StopIteration
         return results[0]

    def Next(self, celt):
        # Need to free the results with CoTaskMemFree
        temp = POINTER(LPWSTR)()
        fetched = DWORD()
        self.__com_Next(celt, byref(temp), byref(fetched))
        if fetched.value == 0:
            return []
        result = []
        for i in range(fetched.value):
            result.append(temp[i])
            windll.ole32.CoTaskMemFree(temp[i])
        windll.ole32.CoTaskMemFree(temp)
        return result

CLSID_CTask = GUID("{148BD520-A2AB-11CE-B11F-00AA00530503}")
class ITask(IScheduledWorkItem):
    _iid_ = GUID('{148BD524-A2AB-11CE-B11F-00AA00530503}')

    # These methods must call CoTaskMemFree on the returned LPWSTR:
    # GetApplicationName
    # GetParameters
    # GetWorkingDirectory

    def GetApplicationName(self):
        temp = LPWSTR()
        self.__com_GetApplicationName(byref(temp))
        result = temp.value
        windll.ole32.CoTaskMemFree(temp)
        return result

    def GetWorkingDirectory(self):
        temp = LPWSTR()
        self.__com_GetWorkingDirectory(byref(temp))
        result = temp.value
        windll.ole32.CoTaskMemFree(temp)
        return result

    def GetParameters(self):
        temp = LPWSTR()
        self.__com_GetParameters(byref(temp))
        result = temp.value
        windll.ole32.CoTaskMemFree(temp)
        return result

################################################################

ITaskScheduler._methods_ = [
    COMMETHOD([], HRESULT, 'SetTargetComputer',
               ( ["in"], LPCWSTR )),
    COMMETHOD([], HRESULT, 'GetTargetComputer',
               ( ["out"], POINTER(LPWSTR) )),
    COMMETHOD([], HRESULT, 'Enum',
               ( ["out"], POINTER(POINTER(IEnumWorkItems)), "ppEnumWorkItems" )),
    COMMETHOD([], HRESULT, 'Activate',
               ( ["in"], LPCWSTR, "pwszName" ),
               ( ["in"], POINTER(IID), "riid" ),
               ( ["out"], POINTER(POINTER(IUnknown)), "ppUnk" )),
    COMMETHOD([], HRESULT, 'Delete',
               ( ["in"], LPCWSTR, "pwszName" )),
    COMMETHOD([], HRESULT, 'NewWorkItem',
               ( ["in"], LPCWSTR, "pwszTaskName" ),
               ( ["in"], POINTER(IID), "rclsid"),
               ( ["in"], POINTER(IID), "riid"),
               ( ["out"], POINTER(POINTER(IUnknown)), "ppUnk")),
    COMMETHOD([], HRESULT, 'AddWorkItem',
               ( ["in"], LPCWSTR, "pwszTaskName" ),
               ( ["in"], POINTER(IScheduledWorkItem), "pWorkItem" )),
    COMMETHOD([], HRESULT, 'IsOfType',
               ( ["in"], LPCWSTR, "pwszName" ),
               ( ["in"], POINTER(IID), "riid")),
]

class _TASK_TRIGGER(Structure):
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 185
    pass
PTASK_TRIGGER = POINTER(_TASK_TRIGGER)

ITaskTrigger._methods_ = [
    COMMETHOD([], HRESULT, 'SetTrigger',
              ( ["in"], PTASK_TRIGGER, "pTrigger") ),
    COMMETHOD([], HRESULT, 'GetTrigger',
              ( ["out"], PTASK_TRIGGER, "pTrigger") ),
    COMMETHOD([], HRESULT, 'GetTriggerString',
              ( ["out"], POINTER(LPWSTR), "ppwszTrigger") ),
]

_TASK_TRIGGER_TYPE = c_int # enum
TASK_TIME_TRIGGER_ONCE = 0
TASK_TIME_TRIGGER_DAILY = 1
TASK_TIME_TRIGGER_WEEKLY = 2
TASK_TIME_TRIGGER_MONTHLYDATE = 3
TASK_TIME_TRIGGER_MONTHLYDOW = 4
TASK_EVENT_TRIGGER_ON_IDLE = 5
TASK_EVENT_TRIGGER_AT_SYSTEMSTART = 6
TASK_EVENT_TRIGGER_AT_LOGON = 7
TASK_TRIGGER_TYPE = _TASK_TRIGGER_TYPE
class _TRIGGER_TYPE_UNION(Union):
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 177
    pass
class _DAILY(Structure):
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 153
    pass
_DAILY._fields_ = [
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 153
    ('DaysInterval', WORD),
]
assert sizeof(_DAILY) == 2, sizeof(_DAILY)
assert alignment(_DAILY) == 2, alignment(_DAILY)
DAILY = _DAILY
class _WEEKLY(Structure):
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 158
    pass
_WEEKLY._fields_ = [
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 158
    ('WeeksInterval', WORD),
    ('rgfDaysOfTheWeek', WORD),
]
assert sizeof(_WEEKLY) == 4, sizeof(_WEEKLY)
assert alignment(_WEEKLY) == 2, alignment(_WEEKLY)
WEEKLY = _WEEKLY
class _MONTHLYDATE(Structure):
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 164
    pass
_MONTHLYDATE._fields_ = [
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 164
    ('rgfDays', DWORD),
    ('rgfMonths', WORD),
]
assert sizeof(_MONTHLYDATE) == 8, sizeof(_MONTHLYDATE)
assert alignment(_MONTHLYDATE) == 4, alignment(_MONTHLYDATE)
MONTHLYDATE = _MONTHLYDATE
class _MONTHLYDOW(Structure):
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 170
    pass
_MONTHLYDOW._fields_ = [
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 170
    ('wWhichWeek', WORD),
    ('rgfDaysOfTheWeek', WORD),
    ('rgfMonths', WORD),
]
assert sizeof(_MONTHLYDOW) == 6, sizeof(_MONTHLYDOW)
assert alignment(_MONTHLYDOW) == 2, alignment(_MONTHLYDOW)
MONTHLYDOW = _MONTHLYDOW
_TRIGGER_TYPE_UNION._fields_ = [
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 177
    ('Daily', DAILY),
    ('Weekly', WEEKLY),
    ('MonthlyDate', MONTHLYDATE),
    ('MonthlyDOW', MONTHLYDOW),
]
assert sizeof(_TRIGGER_TYPE_UNION) == 8, sizeof(_TRIGGER_TYPE_UNION)
assert alignment(_TRIGGER_TYPE_UNION) == 4, alignment(_TRIGGER_TYPE_UNION)
TRIGGER_TYPE_UNION = _TRIGGER_TYPE_UNION
_TASK_TRIGGER._fields_ = [
    # C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 185
    ('cbTriggerSize', WORD),
    ('Reserved1', WORD),
    ('wBeginYear', WORD),
    ('wBeginMonth', WORD),
    ('wBeginDay', WORD),
    ('wEndYear', WORD),
    ('wEndMonth', WORD),
    ('wEndDay', WORD),
    ('wStartHour', WORD),
    ('wStartMinute', WORD),
    ('MinutesDuration', DWORD),
    ('MinutesInterval', DWORD),
    ('rgFlags', DWORD),
    ('TriggerType', TASK_TRIGGER_TYPE),
    ('Type', TRIGGER_TYPE_UNION),
    ('Reserved2', WORD),
    ('wRandomMinutesInterval', WORD),
]
assert sizeof(_TASK_TRIGGER) == 48, sizeof(_TASK_TRIGGER)
assert alignment(_TASK_TRIGGER) == 4, alignment(_TASK_TRIGGER)

IEnumWorkItems._methods_ = [
    COMMETHOD([], HRESULT, 'Next',
              ( ["in", defaultvalue(1)], DWORD, "celt"),
              ( ["out"], POINTER(POINTER(LPWSTR)), "rgpwszNames" ),
              ( ["out"], POINTER(DWORD), "pceltFetched" ),
              ),
    COMMETHOD([], HRESULT, 'Skip',
              ( ["in"], DWORD )),
    COMMETHOD([], HRESULT, 'Reset'),
    COMMETHOD([], HRESULT, 'Clone',
              ( ["out"], POINTER(POINTER(IEnumWorkItems)) ))
]

IScheduledWorkItem._methods_ = [
# C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/mstask.h 373
    COMMETHOD([], HRESULT, 'CreateTrigger',
               ( ["out"], POINTER(WORD), 'piNewTrigger' ),
               ( ["out"], POINTER(POINTER(ITaskTrigger)), 'ppNewTrigger' )),
    COMMETHOD([], HRESULT, 'DeleteTrigger',
               ( ["in"], WORD, 'iTrigger' )),
    COMMETHOD([], HRESULT, 'GetTriggerCount',
               ( ["out"], POINTER(WORD), "pwCount")),
    COMMETHOD([], HRESULT, 'GetTrigger',
               ( ["in"], WORD, 'iTrigger'),
               ( ["out"], POINTER(POINTER(ITaskTrigger)), 'ppTrigger' )),
    COMMETHOD([], HRESULT, 'GetTriggerString',
               ( ["in"], WORD, 'iTrigger' ),
               ( ["out"], POINTER(LPWSTR), 'ppwszTrigger')),
    COMMETHOD([], HRESULT, 'GetRunTimes',
               ( ["in"], LPSYSTEMTIME, 'pstBegin' ),
               ( ["in"], LPSYSTEMTIME, 'pstEnd' ),
               ( ["out", "in"], POINTER(WORD), 'pCount' ),
               ( ["out"], POINTER(LPSYSTEMTIME), 'rgstTaskTimes' )),
    COMMETHOD([], HRESULT, 'GetNextRunTime',
               ( ["out"], POINTER(SYSTEMTIME), 'pstNextRun' )),
    COMMETHOD([], HRESULT, 'SetIdleWait',
               ( ["in"], WORD, 'wIdleMinutes' ),
               ( ["in"], WORD, 'wDeadlineMinutes' )),
    COMMETHOD([], HRESULT, 'GetIdleWait',
               ( ["out"], POINTER(WORD), 'pwIdleMinutes' ),
               ( ["out"], POINTER(WORD), 'pwDeadlineMinutes' )),
    COMMETHOD([], HRESULT, 'Run'),
    COMMETHOD([], HRESULT, 'Terminate'),
    COMMETHOD([], HRESULT, 'EditWorkItem',
               ( ["in"], HWND, 'hParent' ),
               ( ["in"], DWORD, 'dwReserved')),
    COMMETHOD([], HRESULT, 'GetMostRecentRunTime',
               ( ["out"], POINTER(SYSTEMTIME), 'pstLastRun')),
    COMMETHOD([], HRESULT, 'GetStatus',
               ( ["out"], POINTER(HRESULT), 'phrStatus')),
    COMMETHOD([], HRESULT, 'GetExitCode',
               ( ["out"], POINTER(DWORD), 'pdwExitCode')),
    COMMETHOD([], HRESULT, 'SetComment',
               ( ["in"], LPCWSTR, 'pwszComment')),
    COMMETHOD([], HRESULT, 'GetComment',
               ( ["out"], POINTER(LPWSTR), 'ppwszComment')),
    COMMETHOD([], HRESULT, 'SetCreator',
               ( ["in"], LPCWSTR, 'pwszCreator' )),
    COMMETHOD([], HRESULT, 'GetCreator',
               ( ["out"], POINTER(LPWSTR), 'ppwszCreator' )),
    COMMETHOD([], HRESULT, 'SetWorkItemData',
               ( ["in"], WORD, 'cbData' ),
               ( ["in"], POINTER(BYTE),  'rgbData')),
    COMMETHOD([], HRESULT, 'GetWorkItemData',
               ( ["out"], POINTER(WORD), 'pcbData' ),
               ( ["out"], POINTER(POINTER(BYTE)), 'prgbData' )),
    COMMETHOD([], HRESULT, 'SetErrorRetryCount',
               ( ["in"], WORD, 'wRetryCount' )),
    COMMETHOD([], HRESULT, 'GetErrorRetryCount',
               ( ["out"], POINTER(WORD), 'pwRetryCount')),
    COMMETHOD([], HRESULT, 'SetErrorRetryInterval',
               ( ["in"], WORD, 'wRetryInterval')),
    COMMETHOD([], HRESULT, 'GetErrorRetryInterval',
               ( ["out"], POINTER(WORD), 'pwRetryInterval')),
    COMMETHOD([], HRESULT, 'SetFlags',
               ( ["in"], DWORD, 'dwFlags')),
    COMMETHOD([], HRESULT, 'GetFlags',
               ( ["out"], POINTER(DWORD), 'pdwFlags' )),
    COMMETHOD([], HRESULT, 'SetAccountInformation',
               ( ["in"], LPCWSTR, 'pwszAccountName' ),
               ( ["in"], LPCWSTR, 'pwszPassword' )),
    COMMETHOD([], HRESULT, 'GetAccountInformation',
               ( ["out"], POINTER(LPWSTR), "ppwszAccountName" )),
]

ITask._methods_ = [
    COMMETHOD([], HRESULT, 'SetApplicationName',
               ( ["in"], LPCWSTR )),
    COMMETHOD([], HRESULT, 'GetApplicationName',
               ( ["out"], POINTER(LPWSTR) )),
    COMMETHOD([], HRESULT, 'SetParameters',
               ( ["in"], LPCWSTR )),
    COMMETHOD([], HRESULT, 'GetParameters',
               ( ["out"], POINTER(LPWSTR) )),
    COMMETHOD([], HRESULT, 'SetWorkingDirectory',
               ( ["int"], LPCWSTR )),
    COMMETHOD([], HRESULT, 'GetWorkingDirectory',
               ( ["out"], POINTER(LPWSTR) )),
    COMMETHOD([], HRESULT, 'SetPriority',
               ( ["in"], DWORD )),
    COMMETHOD([], HRESULT, 'GetPriority',
               ( ["out"], POINTER(DWORD) )),
    COMMETHOD([], HRESULT, 'SetTaskFlags',
               ( ["in"], DWORD )),
    COMMETHOD([], HRESULT, 'GetTaskFlags',
               ( ["out"], POINTER(DWORD) )),
    COMMETHOD([], HRESULT, 'SetMaxRunTime',
               ( ["in"], DWORD )),
    COMMETHOD([], HRESULT, 'GetMaxRunTime',
               ( ["out"], POINTER(DWORD) ))
]

################################################################

if __name__ == "__main__":
    from comtypes import CoCreateInstance
    scheduler = CoCreateInstance(CLSID_CTaskScheduler, ITaskScheduler)

    for taskname in scheduler.Enum():
        print "  * %s:" % taskname,
        task = scheduler.Activate(taskname, byref(ITask._iid_))
        task = task.QueryInterface(ITask)
        print (task.GetTriggerCount(), task.GetMaxRunTime(), task.GetApplicationName())
        print (task.GetWorkingDirectory(), task.GetParameters())

        from comtypes.automation import IDispatch
        print "IsA", scheduler.IsOfType(taskname, ITask)

        from comtypes.persist import IPersist, IPersistFile
        pi = task.QueryInterface(IPersistFile)
        print "CLSID", pi.GetClassID()
        print "FNM", pi.GetCurFile()
        print "ISDIRTY", pi.IsDirty()
        task.SetComment("blah blah")
        print "ISDIRTY", pi.IsDirty()
        cnt, data = task.GetWorkItemData()

    import sys
    sys.exit()

    print scheduler.Enum()
    print scheduler.Enum().Clone()

    print scheduler.AddRef(), scheduler.Release()

    try:
##        while 1:
            for i in range(100000):
                scheduler.GetTargetComputer()
                for item in scheduler:
                    print item
    except KeyboardInterrupt:
        pass
