codegenerator bugs:

- Handling of errors in h2xml.py must be improved.
  There are two cases:
  1. If the header file cannot be parsed by gccxml (for example,
     if other .h files must be included before the one currently
     processed, error messages must be shown to the user).
  2. If '-c' is given, compiler errors may arise because of 'strange'
     #define directives.  These errors must be parsed by h2xml.py
     itself (they are) and the directives must be excluded, and the
     compilation can be retried.

- Think about the limitations of gccxml:
  - typedefs used in function argument lists are handled differently
    than in structure fields.  Cosmetic bug?
  - No info available about where #define'd symbols came from.

  (Would it be possible to implement a C parser in pure Python?
   PLY would probably be able to handle this, but we need a CPP
   as well).

- Where to store uncompilable #defines, with '-c'?

- If -c is given for h2xml.py, we should rerun gccxml as long as
  compiler errors are found.

- Refactor the code so that function generation can be easily adjusted
  in subclasses of the code generator.

- Import the old docs into cvs.

- Write a README file.

- Fix code generation for inline functions:
<C code>
#ifdef __cplusplus

__inline int IsEqualGUID(REFGUID rguid1, REFGUID rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}
<C code/>

<Python code>
# C:/PROGRA~1/MICROS~3.NET/Vc7/PLATFO~1/Include/guiddef.h 160
IsEqualGUID = CDLL('ole32').IsEqualGUID
IsEqualGUID.restypes = c_int
# IsEqualGUID(rguid1, rguid2)
IsEqualGUID.argtypes = [POINTER(GUID), POINTER(GUID)]

<Python code/>

<xml code>
  <Function id="_4898" name="IsEqualGUID" returns="_3989" context="_1" location="f14:160" file="f14" line="160" endline="162" inline="1">
    <Argument name="rguid1" type="_9847" location="f14:160" file="f14" line="160"/>
    <Argument name="rguid2" type="_9847" location="f14:160" file="f14" line="160"/>
  </Function>
<xml code/>