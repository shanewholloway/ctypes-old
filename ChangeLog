2005-04-27  Andreas Degert  <ad@papyrus-gmbh.de>

	* ctypes/decorators.py: changed the decorators to optionally
	accept a dll object instead of a dll name.

	* ctypes/__init__.py: added methods find() and
	LoadLibraryVersion() to _CDLL.

	* ctypes/__init__.py: added helper functions to find a library
	based on the name as given to the linker -l option (on Posix
	systems).

	* source/callproc.c: added dlname and dladdr (on Posix systems).

2005-04-19  Thomas Heller  <theller@python.net>

	* Fixed quite a few problems on 64-bit platforms.  Reported and
	partly patched by Mike Fletcher.

2005-04-14  Thomas Heller  <theller@python.net>

	* source/_ctypes.c: Fix a crash when a POINTER type has no _type_.
	Reported by Georg Thalhammer, patch provided by Andreas Degert,
	somewhat modified.

2005-04-06  Thomas Heller  <theller@python.net>

	* c_char_p and c_wchar_p no longer accept integers or longs in the
	constructor or in their from_param method.  Use cast instead.

	* c_char_p/c_wchar_p instances, c_char/c_wchar arrays, and
	byref(c_char/c_wchar) can now be assigned to c_char_p/c_wchar_p
	structure fields.

2005-04-05  Thomas Heller  <theller@python.net>

	* source/cfield.c: get_long, get_ulong, get_longlong and
	get_ulonglong now accept all ctypes int/uint instances in addition
	to Python int and long.

2005-04-01  Thomas Heller  <theller@python.net>

	* Changed version number to 0.9.7beta

	* Changed the way CData_FromBaseObj() works.  Instead of calling
	the type with a _basespec_ keyword argument, the instance is
	created in the normal way, and the base object and buffer attached
	afterwards.  Again, this gave a large speedup - see
	unittests/com/test_perf.py.
	
	* Added a small buffer (16 bytes) to the CDataObject structure.
	This allows to skip the call to PyMem_Malloc() in the
	GenericCData_new constructor for small C types.  Together with a
	small optimization in Simple_init() it speeds up instance creation
	a lot: c_int() now takes 0.5 us instead of 1.2 us.

2005-03-31  Thomas Heller  <theller@python.net>

	* Lots and lots of refactoring.  All types now have a setfunc and
	getfunc in their stgdict.  This allowed to remove a lot of
	typechecks spread all around the code.

	CFieldObjects no longer have the getfunc and setfunc fields, they
	are now using the functions from their fieldtype's stgdict.

	Hopefully no change in behaviour - at least the testsuite runs as
	before.

2005-03-24  Thomas Heller  <theller@python.net>

	* source\cfield.c: Refactored the code to always use the
	CFieldObject's getfunc to get field contents.  This makes it easy
	to enhance the code so that this function can be overridden from
	Python.

	These enhancements are currently marked #ifdef EXPERIMENTAL.

2005-03-18  Thomas Heller  <theller@python.net>

	* ctypes-0.9.6 released.

	* Back out the '.so' magic again.

2005-03-17  Thomas Heller  <theller@python.net>

	* ctypes\__init__.py: On platforms where dlopen is used, and '.so'
	is the default shared library extension, if dlopen fails and the
	filename doesn't end with '.so', try again with '.so' appended to
	the filename. This allows to use the attribute access syntax to
	cdll to load libraries in some cases: 'cdll.libm'.

	* ctypes\__init__.py: Removed the __del__ method in _CDLL.  This
	caused garbage in Python's gc.  Reported by Erik Andersen.

	* ctypes.com.register: Enclose the Python script to run as com
	server in double quotes in case the path contains spaces.  Fix by
	Juan Carlos Coruna.

	* ctypes.wrap.h2xml script: Added two command line options to
	include preprocessor symbols into the xml file (the was the
	default before), and to not delete temporary files which may help
	locating problems in the compilation.  The latter was suggested by
	'Bryan' on the ctypes-users list.

	Expanded the default excluded symbols list on Windows, so that
	'limits.h' can be processed.

	'h2xml.py' can now read preprocessor symbol names to exclude from
	a local configuration file 'h2xml.cfg' inb the current directory.

2005-03-16  Thomas Heller  <theller@python.net>

	* ctypes\source\_ctyopes.c: Subclasses of c_char_p, c_wchar_p, and
	c_void_p were not able to override the from_param class method in
	their class definitions because SimpleType_new overwrote them.
	Reported by Andreas Degert.

	* ctypes\source: Removed the unneeded nArgBytes member from
	StgDictObject, and changed the code accordingly.  Thanks to
	Andreas Degert for spotting this.

	* ctypes\wrap\cparser_config.py: Added some symbols from windows
	limits.h header file to the excluded list - h2xml.py choked on
	them.

2005-03-14  Thomas Heller  <theller@python.net>

	* _ctypes.c: Fixed refcount leak in functions with 'out'
	parameters.  This has only relevance for the unreleased comtypes
	package.

	* _ctypes.c: Keyword arguments to Structures/Unions were ignored.
	Thanks to Jimmy Retzlaff for finding this.

2005-03-11  Thomas Heller  <theller@python.net>

	* ctypes-0.9.5 released.

	* The prototypes that WINFUNCTYPE or CFUNCTYPE return can now be
	called with an optional third parameter: paramflags.  This must be
	a tuple specifying the parameter direction (in, out), the
	parameter name (optional), and the default parameter value (also
	optional).  This creates a somewhat higher level function, and
	also allows to call functions with named parameters.

	The change made on 2005-01-15 has been reverted again - it is
	better to create instancemethods, if needed, in the calling code.

2005-02-10  Thomas Heller  <theller@python.net>

	* Clean up the_ semantics on Structure/Union types. The _fields_
	attribute can no longer be set after one of the following happens:
	
	- The _fields_ attribute is set.
	- An instance of the type is created.
	- The type is used as field in another Structure/Union.
	- The type is subclassed.

2005-01-26  Thomas Heller  <theller@python.net>

	*  source\_ctypes.c: Prevent a crash when .restype or .argtypes
	attribute of a function is deleted.

2005-01-20  Thomas Heller  <theller@python.net>

	* source\callproc.c: Print a real traceback when an exception is
	raised in a callback function.

2005-01-15  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: WINFUNCTYPE (and CFUNCTYPE) can now be called
	with three parameters: integer, string, class.  It returns an
	unbound method fpr class, calling into a COM vtable at the integer
	index. The string is the method name.

	Better error chcking, and fix a compiler warning in CFuncPtr_new.

2004-12-30  Thomas Heller  <theller@python.net>

	* _ctypes.c (_CData_set): Assinging None to a POINTER structure
	field makes a NULL pointer.

	* source\_ctypes.c (Pointer_ass_item): Prevent NULL pointer access
	when assigning to pointer instances.

2004-12-17  Thomas Heller  <theller@python.net>

	* source/callbacks.c: Corrected the exception handling in callback
	functions. SystemExit in a callback now actually exits Python.

2004-12-02  Thomas Heller  <theller@python.net>

	* Structure types as restype and in argtypes of functions do work
	now. Not sure about callback functions.

	The _fields_ attribute is now handled correctly in Structure
	sub-subclasses.  It is extended instead of replaced.

	if 'sizeof(int) == sizeof(long)', c_int/c_uint are now aliases for
	c_long/c_ulong, and if 'sizeof(long) == sizeof(long long)',
	c_longlong/c_ulonglong are now aliases now for c_long/c_ulong.


2004-12-01  Thomas Heller  <theller@python.net>

	* The annoying pointer bug has been fixed.

2004-11-19  Thomas Heller  <theller@python.net>

	* (Message): The _fields_ attribute can now be set *after* a
	Structure or Union type has been created.
	XXX Describe the exact semantics.

2004-10-29  Thomas Heller  <theller@python.net>

	* (Message): Define a new protocol for function's restype.  If it
	is a ctypes' type, it is handled in the usual way.  But if it
	additionally has an _check_retval_ attribute, this is called with
	the result, and the return value of this call is the functions
	return value.

	This allows to define HRESULT as a ctypes' type, because it can
	check for failure in it's _check_retval_ static method, and raise
	a WindowsError.

	The big advantage is that now HRESULT is also usable in the
	argtypes list.
	
	Although HRESULT is defined in python code (since it is derived
	from c_long), the _check_retval_ method is implemented in C - in
	this way the traceback won't include the _check_retval_ method
	definition itself.

	* (Message): Increased version number to 0.9.3.

2004-10-28  Thomas Heller  <theller@python.net>

	* (Message): ctypes 0.9.2 released.

	* Renamed the functions: get_string -> string_at,
	get_wstring -> wstring_at

2004-10-20  Thomas Heller  <theller@python.net>

	* Cycle GC support added for the PointerType_Type metaclass.
	This makes the test_leaks unittests work.
	Reverted the changes for lazy structures again.

	* Remove CFuncPtrType_from_param again.  Later.

2004-10-19  Thomas Heller  <theller@python.net>

	* unittests\test_cfuncs.py: Fixed the test to work on OS X.  The
	problem probably was that OS X loads several different instances
	of the _ctypes_test shared library.

2004-10-15  Thomas Heller  <theller@python.net>

	* Implemented memmove, memset and get_string functions.  They will operate
	on any type of argument, so they should be used carefully.

	* Reinstalled the magic _abstract_ attribute for Structure and
	Union types.  If this attribute is defined, the _fields_ attribute
	looses it's special meaning.  Kept for backwards compatibility.

	* Work around a bug in Python's PyUnicode_FromWideChar and
	PyUnicode_AsWideChar api functions.

2004-10-14  Thomas Heller  <theller@python.net>

	* Implemented cycle GC for several internal types fixed some
	leaks.  Fixed another memory leak and a refcount leak.
	Added a unittest to check for leaks.

2004-10-13  Thomas Heller  <theller@python.net>

	* Bit fields in structures and unions are now implemented.  They
	are defined using a third item in the _fields_ list, which
	specifies the number of bits in this field.  Bit fields are only
	allowed for numeric types, not for character types like c_char.
	Tested on several x86, windows and linux.

2004-10-12  Thomas Heller  <theller@python.net>

	* Implemented a cast(obj, ctype) function. This should be used to
	convert one type of pointer to abother type of pointer.  For
	example, a POINTER(c_byte) instance could be converted to a
	c_char_p instance pointing to the same memory location, allowing
	to access the zero-terminated string pointed to.
	
	* Unicode should now work on non-windows systems.  Tested on Suse
	Linux x86 and x86-64, Redhat linux x86 (wide unicode build).

2004-10-08  Thomas Heller  <theller@python.net>

	* source\callbacks.c: Added a cast function, which creates a new
	ctypes type instance from an existing instance.  Does not yet work
	correctly for integers of different sizes, but should work for
	pointers - and that's where it is needed.

	* ctypes\__init__.py: POINTER(None) will now return c_void_p.
	This change was made to ease automatic code generation (and makes
	sense, since None is used in other places for 'void' as well.

	* source\_ctypes.c: ctypes _pointer_type_cache now lives in the
	_ctypes module, to make it available to C code.
	
	Setting the _fields_ attribute on a Structure or Union type after
	creation automatically update the POINTER instance to it when it
	already exists, this allows to use POINTER(<type>) in the _fields_
	list without need to update the POINTER type later.

	Implemented a customg from_param class method for CFuncPtrType:
	Python callables can now be passed directly as arguments to
	functions requiring callbacks: WINFUNCTYPE() or CFUNCTYPE() in the
	argtypes list.

	To avoid having to keep a reference to the created callback
	function explicitely (which will always be forgotten), started
	code to keep a reference automatically - currently this only works
	for functions, *not* for methods!!!

2004-09-28  Thomas Heller  <theller@python.net>

	* (Message): Support for 'lazy' Structure and Union definitions.
	The _fields_ attribute can now be set after the class has been
	defined.

2004-09-21  Thomas Heller  <theller@python.net>

	* (Message): Increased version number to 0.9.2.

2004-09-16  Thomas Heller  <theller@python.net>

	* (Message): ctypes 0.9.1 released.
	
	* (Message): The internal conversions that ctypes does between
	unicode and strings can now use a specified encoding and error
	handling.  A set_conversion_mode() function allows to set them, it
	returns the previous values.  The inital values are ('mbcs',
	'ignore') on Windows, and ('ascii', 'strist') on other systems.

	(source\callproc.c): The Extend_Error_Info() function has been
	fixed - sometimes is displayed weird error messages like
	'TypeError: function takes 5 arguments (1 given)' when an
	UnicodeEncodingError was raised.

	When internal processing of an argument for a function call fails,
	the new ctypes.ArgumentError exception is raised.


2004-09-15  Thomas Heller  <theller@python.net>

	* ctypes\__init__.py: CDLL and subclasses now accept an optional
	second handle parameter.  If this is supplied, it is used instead
	of calling LoadLibrary() or dlopen() to get one.

	* source\callproc.c: Important fix - sometimes pointers to
	arguments in function call have been free'd too early, especially
	when argtypes have been specified for functions.

2004-09-07  Thomas Heller  <theller@python.net>

	* (Message): Fix the create_unicode_buffer function - it was
	returning c_char arrays instead of c_wchar arrays.

	Both create_string_buffer and create_unicode_buffer can now be
	called with string and unicode instances, they will do the needed
	conversions themselves.

2004-09-01  Thomas Heller  <theller@python.net>

	* (Message): A pythonapi object has been added to the ctypes
	package.  On windows, it is bound to the python dll, on other
	systems it is bound to the current process.

	It allows to access C Python api functions.

	py_object is the ctypes type corresponding to the C 'PyObject *'
	type.

	* ctypes: It is now possible to call cdecl functions with more
	arguments than the length of the argtypes attribute, even if this
	is set.  This allows specify argtypes for functions like sprintf().

2004-08-27  Thomas Heller  <theller@python.net>

	* ctypes: Accept integer addresses, uncode strings, and strings in
	the c_char_p and c_wchar_p constructor and as c_char_p and
	c_wchar_p fields in Structures.  strings are automatically decoded
	to unicode, and unicode is automatically encoded in strings if
	needed.

	Integer addresses are *not* accepted in function parameter lists,
	they must before be converted to c_char_p or c_wchar_p.


2004-08-26  Thomas Heller  <theller@python.net>

	* source\callproc.c: Implemented Py_INCREF and Py_DECREF as
	functions.

	* ctypes\__init__.py: Cache the types that WINFUNCTYPE and
	CFUNCTYPE creates, to avoid creation of a lot of similar classes.
	Rearrange the code to use try:except: instead of dict.get(xxx,
	None), the former is faster if lookup mostly succeeds - as is the
	case for POINTER imo.

	This makes importing large COM files created by readtlb a lot
	faster, since WINFUNCTYPE is called for every COM method.  The
	python wrapper for mshtml.tlb, which contains nearly 600
	interfaces, now imports in 3 seconds instead of 40!


2004-08-20  Thomas Heller  <theller@python.net>

	* (Message): Add the PyDLL class and pydll object to ctypes, they
	will expose functions using FUNCFLAG_PYTHONAPI allowing to call
	Python api functions.

	* source/cfield.c: Add accessors for 'O' typecode (which converts
	to/from python objects).

	* (Message): Implement the FUNCFLAG_PYTHONAPI flag which allows to
	call Python API functions with ctypes.  Somewhat tricky - we have
	to keep the thread state during the call, and we have to make sure
	to return failure if the Python error flag has been set.
	
2004-08-19  Thomas Heller  <theller@python.net>

	* (Message): the alignment function was not exported by the ctypes
	module.  It returns the alignment requirements in bytes of a type
	or instance.

	* source/callproc.c: The _ctypes.call_function function, although
	private and deprecated, has been put back in - it is used by Gary
	Bishop's readline module.

2004-08-18  Thomas Heller  <theller@python.net>

	* (Message): Array and POINTER instance now support slicing, for
	POINTER only getslice is implemented (setslice is too dangerous,
	probably).  Slices are accepted or returned as lists of the
	elements, except for character and unicode character pointer and
	arrays, where strings resp. unicode strings are used - much more
	convenient.

	* MANIFEST.windows.in: Added the include files which were missing
	from the source distribution.

2004-07-28  Thomas Heller  <theller@python.net>

	* (Message): CopyComPointer is no longer a function exported from
	the _ctypes dll/shared lib, instead it is a normal Python function
	implemented in the _ctypes extension.  This allows to build
	_ctypes as a builtin module.

2004-07-23  Thomas Heller  <theller@python.net>

	(Message): ctypes 0.9.0 released.

	
	* (Message): c_int, c_uint and other integer variants now use the
	masked functions when converting Python integers/longs to C
	integers.  This has the effect that the value of the integer is
	never checked, it is silently truncated.

	* (Message): ctypes now requires Python 2.3 or better.

	* (Message): Add some 'hacks' which make ctypes work on big-endian
	platforms.  On platforms with strict alignment rules, there are
	still some crashes (solaris sparc).

2004-xx-xx  Thomas Heller <theller@python.net>
	
	* (Message): Conversion to libffi is now complete.  libffi is now
	used on all platforms.  unittests pass, at least on x86
	architectures.  Tested on Linux, FreeBSD.

2004-05-07  Thomas Heller  <theller@python.net>

	* (Message): Tag the HEAD with before_libffi_2004_05_07

	* ctypes\source\callbacks.c: Callback functions can now return
	c_char and c_char_p data types.

2004-05-06  Thomas Heller  <theller@python.net>

	* Finally fixed the sometimes shortened traceback prints when an
	exception occurrs in a callback function - only the exception
	class was printed, not the value.

2004-05-03  Thomas Heller  <theller@python.net>

	* win32\com\client.py: Add a COMError class, compatible to that
	used in pywin32.  If _DispMethod.__call__ fails, a COMError is now
	raised, with more detailed information.

	* ctypes\__init__.py: The WinError function does now accept an
	optional second parameter, this is the textual error description.

2004-04-20  Thomas Heller  <theller@python.net>

	* ctypes\__init__.py: c_buffer is silently deprecated, and
	replaced by create_string_buffer.  A similar function
	create_unicode_buffer has been added.

	* source\callproc.c: Improve the error reporting for access
	violations - the message now reports the faulting address in
	charge, and whether reading or writing failed.

2004-02-05  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Added c_char_p_from_param and
	c_void_p_from_param class methods to the _SimpleCData type.  These
	are later used as from_param class methods for the c_void_p,
	c_char_p, and POINTER(c_char) types.  Added unittests for them.

	* (CFuncPtr_set_argtypes): It is now possible to assign None to a
	functions argtypes attribute.  This clear the argtypes sequence,
	after that the function can be called with any number and types of
	arguments.

2004-01-20  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Moved the test functions into a seaparate
	Python extension module _ctypes_test.c.  Setup-script and
	unittests updated.

2003-10-30  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Finally added cycle GC support for all the
	base-types implemented in this module, without breaking the
	test-suite.

2003-10-24  Thomas Heller  <theller@python.net>

	* win32\com\__init__.py: Changes to prevent crashes when the
	interpreter exits, and COM pointers are to be cleaned up.  The
	problem was that CoUninitialize was registered by the atexit
	module, and this runs *before* all the modules are cleared out and
	the final Release() call on the COM pointers is done.  The
	solution is to create an object in the com\__init__.py module
	which will call CoUninitialize when it's refcount reaches zero.
	Even better would probably be to make this an attribute of the sys
	module, because sys is cleaned last, only __builtins__ is cleaned
	later.
	
2003-07-18  Thomas Heller  <theller@python.net>

	* ctypes\__init__.py (c_buffer): Accept int as well as long
	integers as the size argment for c_buffer.

2003-07-09  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Prevent crashes on pointer(IUnknown()) call.
	
2003-07-08  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Finally fixed this nasty pointer bug. The
	incomplete pointer sample from the tutorial now works.
	
2003-07-03  Thomas Heller  <theller@python.net>

	* ctypes\__init__.py: Use __getitem__ to load libaries or get functions.
	gpib = cdll["gpib-32.dll"], and gpib["Function-With-A-Strange_Name@@@"].
	Suggested by Chuck Esterbrook.

2003-06-24  Thomas Heller  <theller@python.net>

	* source\_callbacks.c: Callback functions can now return simple
	data types like floats, doubles, long long and so on.  Before,
	only integers were returned.

2003-06-12  Thomas Heller  <theller@python.net>

	* source\*.c: On Windows, structures and unions can now be passed
	*by value* to function calls.

2003-06-03  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Raise AttributeError instead of ValueError
	when a function is not found in a dll. Suggested by Chuck Esterbrook.

2003-05-16  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Fix some (but not all) problems with pointer
	instance and types.
	
	* source\_ctypes.c: Make the restype atribute of functions readable.
	VisualPython's debugger had problems if it was not.
	Contributed by Nick Adams.

	* ctypes\__init__.py: Fix the name of the void pointer type, it's
	c_void_p not c_voidp (but leave the old name intact)

	* source\cfield.c: The c_wchar_p.from_param method did not accept
	None (NULL pointer as parameter). Unittests updated.

	* source\_ctypes.c: ctypes' types now have a in_dll() class method.
	It allows to access values exported from dlls. Also added a unittest.
	Often requested feature.

2003-05-14  Thomas Heller  <theller@python.net>

	* win32\com\register.py: Register the script with the absolute
	pathname.

2003-03-11  Thomas Heller  <theller@python.net>

	* ctypes/source: CFuncPtr changes: The _argtypes_ attribute is now
	optional (but required if you want to construct callbacks).
	CFuncPtr now has two contructors: CFuncPtr(callable), and
	CFuncPtr(funcname, dll).  So CFuncPtr can now completely replace
	both CFunction (for callbacks) and DynFunction (for dll
	functions).

2003-03-07  Thomas Heller  <theller@python.net>

	* ctypes: The CFuncPtr type now supports cyclic garbage
	collection, it is especially useful here, but GC support for other
	types is not far away.

	* ctypes: The CFunction subclass _types_ attribute does not accept
	format characters any more, types like c_int, c_char_p and so on
	must now be used.  The same change has been made for the argtypes
	and restype attribute of dll functions.

	A new base type CFuncPtr was added.  This will soon make CFunction
	and DynFunction obsolete.  Subclass creation requires an _argtype_
	attribute mush must be a sequence of types like c_int or c_charp,
	a _flags_attribute which must be a bitwise or of FUNCFLAG_CDECL,
	FUNCFLAG_STDCALL and FUNCFLAG_HRESULT (the latter two only on
	Windows) to specify the calling convention, and an optional
	_restype_ attribute which defaults to c_int.

	The plan is to create some factory functions like STDCALL() and
	CDECL() which return CFuncPtr subclasses, this is useful to define
	these subclasses in an expression instead of a class statement, also
	it probably makes it easier to use.

	Obscure change: If the CFunction instance uses c_int in the
	_types_ sequence, it will now receive a standard Python integer
	and no longer a c_int instance if it is called. (CFuncPtr
	instances behave in the same way).

2003-03-04  Thomas Heller  <theller@python.net>

	* ctypes.py (cdll): Changed the __getattr__ implementations for
	all *DLL classes to raise an attribute error if the requested name
	both starts and ends with a double underscore.  Thanks to Wolfgang
	Strobl for pointing at this.

2003-02-26  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Removed the unused from_bytes stuff.
	
	* source\_ctypes.c (CString_new): The buffer is only initialized
	to the bytes from the string is passed in, if any.  The
	terminating NUL byte is always set.  This allows large c_string
	instances to be created with minimum overhead.

	* source: Moved code from _ctypes.c into the new files cfield.c
	(field accessors) and stgdict.c (storage info dict).

2003-02-25  Thomas Heller  <theller@python.net>

	* source\callproc.c: Added call_cdeclfunction.

	*  source\_ctypes.c: addressof() now accepts CFunction instances.

2003-02-24  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: c_string() and c_wstring() signatures
	changed. If the first parameter is a string, an optional positive
	integer can be used as second parameter to specify the size of the
	internal buffer.  This size does NOT include the terminating NUL
	byte.  Since sizeof() does now support c_string and c_wstring,
	len() is no longer supported (c_string and c_wstring have never
	really been sequences).

	* source\_ctypes.c: Made sizeof() and addressof() work with
	c_string and c_wstring objects.

	* source\callproc.c: PyCArgObjects now have a readonly _obj
	attribute, this is the object passed to the byref() call.  Useful
	for implmenting custom argument type checking in Python.

2003-02-20  Thomas Heller  <theller@python.net>

	* unittests\test_strings.py (StringTestCase.test_sized_strings):
	Added tests for the new c_string constructor.

	* source\_ctypes.c (CString_new): The c_string constructor can now
	be called with a positive integer, this will create an empty
	string buffer of the specified length (+ 1 for a terminating NUL
	character).

	* source\_ctypes.c (CString_new): It's no longer possible to call
	c_string with None as argument.  It created a string of zero size,
	but this doesn't seem to make sense.

2003-02-19  Thomas Heller  <theller@python.net>

	* source/_ctypes.c, ctypes.py: Add a c_voidp data type, which
	represents (void) pointers to memory locations. The value
	attribute is a Python integer (or a long).

2003-02-18  Thomas Heller  <theller@python.net>

	* (Repository): Added a packages directory, and created a ctcom
	package.  See separate changelog.

2003-02-11  Thomas Heller  <theller@python.net>

	* source/_ctypes.c: The .from_parameter method of POINTER classes now
	accept Array instances containing elements of exactly the same
	type.

	* source/callproc.c: Make sure call_comproc checks for valid
	number of arguments before calling _CallProc.
	
2003-02-07  Thomas Heller  <theller@python.net>

	* Version 0.4.0 released and uploaded.
	
	* source/_ctypes.c: PointerType_new, ArrayType_new,
	SimpleType_new, and CFunctionType_new did not check for NULL
	result from PyType_Type.tp_new() call.  This call will fail in
	Python 2.3 when 'object' is listed as the first base class with a
	TypeError: MRO conflict among bases.  Spotted by Greg Chapman.

2003-02-05  Thomas Heller  <theller@python.net>

	* The 'raw' and 'value' properties of c_wstring are back, also
	fixed some severe bugs (it seems c_wstring never worked
	correctly).

	Added unittests.

	* Fixed a problem in c_string: The NUL byte at the buffer end
	could be overwritten.  Added unittests for c_strings.

	Per suggestion from Niki Spahiev, CFieldObjects now have a
	readonly size and offset property.  Added short docs for them.
	

2003-01-31  Thomas Heller  <theller@python.net>

	* Item deletion on Array or Pointer instances did crash with a
	NULL pointer access.  Added unittest for this, and also for
	Arrays.

2003-01-28  Thomas Heller  <theller@python.net>

	* source\_ctypes.c: Dangerous code checked in.  Pointer instances
	can point to a single data item, or they can point to an array of
	values.  Back in the distant past ;-), I had a SetSize() method,
	which would enable indexes != 0.  Don't know when and why I
	removed it, but I need it again.  Should it have to be enabled
	explicitely?  Would be better, it seems.
 
 	Note that there's no corresponding ass_item implementation with
	indexes != 0.  This means, we can get and change the items the
	pointer points to, if they are mutable, but not replace the items
	by different ones.


2003-01-24  Thomas Heller  <theller@python.net>

	* (several): Fixed the alignment and size of the compound
	datatypes Structure, Union, and hopefully also Array.

2003-01-23  Thomas Heller  <theller@python.net>

	* source/_ctypes.c: Raise a TypeError if a SimpleCData type or a
	CDataType is specified as a CFunction's restype.
	
	* source/_ctypes.c: CFunction now has a from_param class method.
	This means that CFunction subclasses can now be used in the
	argtypes attribute, and so typechecking is done.

	* unittests: Rewrote the tests from doctest to pyunit.

2003-01-21  Thomas Heller  <theller@python.net>

	* source/: Merged in these changes from the C_FAST_CARGS branch:

	ConvParam returns PyCArgObject instances now.  Fixed the
	_as_parameter_ properties of Array, CString, and CFunction so that
	they 'return' PyCArgObject instances instead of magic tuples.

	Added a public 'P' fielddescriptor, which is mostly for internal
	use.

	The 's' rettype value for functions is probably useless, because
	functions return *pointers* to strings (char *), not strings.

	Adapted all the unittests to work, and also changed the samples.

2003-01-20  Thomas Heller  <theller@python.net>

	* source/*.[ch]: Introduced PyCArgObject objects, which contain a
	Python object itself and also the data converted to C.  This
	replaces the magic 3-tuples, and should be somewhat faster because
	no two conversions take place.

	This is now used by SimpleType_from_param(), byref(), and
	Pointer_as_parameter(), and is understood by ConvParam().

 	In the long run this should be the only thing (besides primitive
	Python data types with trivial conversions) used by ConvParam().

 	Also ConvParam should probably *return* these things.


2003-01-17  Thomas Heller  <theller@python.net>

	* source/_ctypes.c: Rewrite of SimpleType_from_param complete.
	unittests/test_parameters.py shows that it does the right things
	in most cases.
	
	* (Repository): Moved everything from local CVS to the SF
	repository, and restructured the directories.

